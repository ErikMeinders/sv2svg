# sv2svg - SystemVerilog to SVG Logic Diagram Converter

## Purpose
Converts structural SystemVerilog modules into readable logic-diagram SVGs using Schemdraw.
Parses HDL, assigns gates to levels via topological sorting, and renders them with automatic
routing and collision avoidance.

## Installation
```bash
pip install sv2svg
```

## CLI Usage

### Basic Usage
```bash
# Convert SystemVerilog to SVG
sv2svg input.sv -o output.svg

# Output to stdout (useful for pipelines)
sv2svg input.sv -o -

# With visual enhancements
sv2svg input.sv --fill-gates --signal-styles --fanout-wires --style vibrant -o output.svg

# Vertical layout with dark theme
sv2svg input.sv --orientation vertical --style dark -o output.svg

# Include truth table (max 5 inputs)
sv2svg input.sv --table -o output.svg
```

### Common Options
- `--style {classic,blueprint,midnight,mono,vibrant,dark}` — Color scheme (default: classic)
- `--orientation {horizontal,vertical}` — Layout direction (default: horizontal)
- `--fill-gates` — Enable fill colors for logic gates
- `--signal-styles` — Use different line styles (solid=primary I/O, dashed=intermediate)
- `--fanout-wires` — Use thicker lines for signals with higher fan-out
- `--table` — Include truth table in diagram (max 5 inputs)
- `--no-caption` — Suppress "Module: modulename" caption
- `--no-internal-labels` — Suppress labels on auto-generated signals
- `--font-scale FLOAT` — Font size scale factor (default: 1.2)
- `--grid-x FLOAT`, `--grid-y FLOAT` — Grid snapping for alignment

## Python API

### Basic Usage
```python
from sv2svg import SVCircuit

# Parse SystemVerilog file
circuit = SVCircuit()
circuit.parse_file('input.sv')

# Generate SVG diagram
svg_content = circuit.generate_diagram(
    style='vibrant',
    orientation='horizontal',
    fill_gates=True,
    signal_styles=True,
    fanout_wires=True,
    include_table=False,
    suppress_caption=False,
    font_scale=1.2
)

# Write to file
with open('output.svg', 'w') as f:
    f.write(svg_content)
```

### Style Presets
- `classic` — Dark blue-gray (default)
- `blueprint` — NASA blue for technical documentation
- `midnight` — Cyan on dark background
- `mono` — Grayscale for print-friendly output
- `vibrant` — Bright gate colors (requires --fill-gates)
- `dark` — Light-on-dark theme

## Supported SystemVerilog Constructs

### ✅ Fully Supported
- **Gate instantiations**: `AND u1(a, b, y);`
- **All common logic gates**: AND, OR, NAND, NOR, XOR, XNOR, NOT/INV, BUF/BUFFER
- **Complex assign expressions** with operator precedence and parentheses:
  ```systemverilog
  assign y = a & b;              // AND gate
  assign y = a | b & c;          // OR(a, AND(b,c)) with precedence
  assign y = (a | b) & c;        // AND(OR(a,b), c)
  assign y = a & b | c & d;      // OR(AND(a,b), AND(c,d))
  assign y = ~(a & b | c);       // NOR gate with intermediate gates
  assign y = a & b & c;          // Cascaded AND gates
  assign #3 y = a & b;           // AND gate with 3-unit delay label
  ```

### ❌ Not Supported
- Ternary operators: `assign y = sel ? a : b;`
- Bit operations: `assign y = a[0] & b[1];`
- Arithmetic: `assign y = a + b;`
- Behavioral code (always blocks, if/else, etc.)

For unsupported constructs, use explicit gate instantiations.

## Common Patterns

### Full-Featured Diagram
```bash
sv2svg input.sv \
  --style vibrant \
  --fill-gates \
  --signal-styles \
  --fanout-wires \
  --table \
  --no-caption \
  -o output.svg
```

### Pipeline Integration
```bash
# Process multiple files
for f in *.sv; do
  sv2svg "$f" -o - > "${f%.sv}.svg"
done

# Generate and view immediately
sv2svg input.sv -o - | display  # ImageMagick
```

### Programmatic Generation
```python
from sv2svg import SVCircuit
import sys

def generate_logic_diagram(sv_code: str, style: str = 'classic') -> str:
    """Generate SVG from SystemVerilog string."""
    circuit = SVCircuit()

    # Write to temp file and parse
    import tempfile
    with tempfile.NamedTemporaryFile(mode='w', suffix='.sv', delete=False) as f:
        f.write(sv_code)
        temp_path = f.name

    try:
        circuit.parse_file(temp_path)
        return circuit.generate_diagram(style=style)
    finally:
        import os
        os.unlink(temp_path)
```

## Key Limitations

1. **Truth tables**: Only generated for circuits with ≤5 inputs (max 32 rows)
2. **Expression parser**: Limited to boolean logic (no arithmetic, ternary, bit operations)
3. **Structural only**: No behavioral code support (always blocks, etc.)
4. **Module scope**: Single module per file (no hierarchical instantiations)

## Visualization Features

### Gate Fill Colors (`--fill-gates`)
- Default: Subtle pastel colors
- Vibrant style: Bright colors (AND=red, OR=blue, XOR=orange, NOT=purple, BUF=teal)

### Signal Line Styles (`--signal-styles`)
- Solid lines: Primary inputs and outputs
- Dashed lines: Intermediate signals (declared as `logic`)

### Fan-out Wire Thickness (`--fanout-wires`)
- 1.0: Single load (1 gate)
- 1.3: Dual load (2 gates)
- 1.6: Moderate fan-out (3-4 gates)
- 2.0: High fan-out (5+ gates)

## Version Information
```bash
sv2svg --version
```

## Documentation
- GitHub: https://github.com/ErikMeinders/sv2svg
- PyPI: https://pypi.org/project/sv2svg/
- Schemdraw docs: https://schemdraw.readthedocs.io/

## Common Issues

### Label Positioning
- Label offsets are in drawing coordinate units (not font points)
- Positive Y moves UP, negative Y moves DOWN
- Offsets must scale with `font_scale` for consistent spacing

### Routing Issues
- Use `--grid-x 0 --grid-y 0` to disable snapping and debug coordinates
- Enable `--signal-styles` and `--fanout-wires` to visualize signal paths
- Check intermediate signal labels to verify connectivity

### Style Not Applying
- Ensure style name matches preset exactly (case-sensitive)
- Vibrant colors require `--fill-gates` flag
- Dark theme requires `--style dark` (not automatic)
